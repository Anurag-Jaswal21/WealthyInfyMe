from dotenv import load_dotenv
from flask import Flask, render_template, request, session
from config import Config
from datetime import timedelta
from flask import Flask, render_template
import requests
import urllib3


from .db import mongo
from .db import mysql
from .db import bcrypt
from .db import jwt

from .bps.auth_bp import auth_bp
from .bps.landing_bp import landing_bp
from .bps.api_bp import api_bp
from .bps.protected_bp import protected_bp
from .bps.newsShowCase_bp import newsShowCase_bp
from .bps.world_bp import world_bp
from .bps.newsPage import newsPage_bp

def create_app():
    #loading the environement varaible to use it in differnt files(like; config.py)
    load_dotenv(dotenv_path='../')
    app = Flask(__name__)
    app.config.from_object(Config)
    app.url_map.strict_slashes = False
    app.permanent_session_lifetime = timedelta(minutes=30)

    # Initialize database here
    mongo.init_app(app)
    mysql.init_app(app)

    # Initialize the Flask app with bcyrpt
    bcrypt.init_app(app)

    #Intializing JWT tokens
    jwt.init_app(app)

    # BluePrints Registering
    app.register_blueprint(newsPage_bp, url_prefix='/info/')
    app.register_blueprint(api_bp, url_prefix='/api/')
    app.register_blueprint(auth_bp, url_prefix='/auth')
    app.register_blueprint(landing_bp, url_prefix = '/') 
    app.register_blueprint(protected_bp, url_prefix='/')
    app.register_blueprint(newsShowCase_bp, url_prefix='/newsShowCase')
    app.register_blueprint(world_bp, url_prefix='/world/')

    # creating templates
    import re
    @app.template_filter('regex_fullmatch')
    def regex_fullmatch(string, pattern):
        return bool(re.fullmatch(pattern, string))
    
    # missingPage errorhandler
    @app.errorhandler(404)
    def notFound(error):
        from  datetime import datetime
        return render_template('notFoundPage.html', today = datetime.now())
    
    @app.before_request
    def set_location():
        if not (session.get('state', False) and session.get('country', False)):
            db = mongo.cx['newChannels']
            countries = list( db.countries.find({'name': 'India'}, {'_id': 0, 'states': 1 }) )
            session['states'] = (countries if countries else [[]])[0].get('states', [])
            session['state']  = ['Karnataka', 'India']
            session['country'] = 'India'


    return app

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

NEWS_API_KEY = '18b2d45a6c5e4d4bb27faf9448d139b9'

def fetch_news_by_query(query, page_size=12):
    url = f'https://newsapi.org/v2/everything?q={query}&language=en&pageSize={page_size}&apiKey={NEWS_API_KEY}'
    try:
        response = requests.get(url, verify=False)  # Added verify=False to bypass SSL check
        data = response.json()
        if data.get("status") != "ok":
            print(f"Error fetching {query}: {data}")
            return []
        return data.get("articles", [])
    except Exception as e:
        print(f"Exception while fetching news for {query}:", e)
        return []

    @app.route('/')
    def index():
        topics = ['Mysore', 'India', 'World', 'Cricket']
        news_data = {topic: fetch_news_by_query(topic) for topic in topics}
        return render_template('index.html', news_data=news_data)

    if __name__ == "__main__":
        app.run(debug=True)












        -------------------------------------------------















        jinja2.exceptions.UndefinedError
jinja2.exceptions.UndefinedError: 'news_data' is undefined

Traceback (most recent call last)
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask\app.py", line 1536, in __call__
return self.wsgi_app(environ, start_response)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
response = self.handle_exception(e)
           ^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask_restful\__init__.py", line 298, in error_router
return original_handler(e)
       ^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
response = self.full_dispatch_request()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
rv = self.handle_user_exception(e)
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask_restful\__init__.py", line 298, in error_router
return original_handler(e)
       ^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
rv = self.dispatch_request()
     ^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask_jwt_extended\view_decorators.py", line 170, in decorator
return current_app.ensure_sync(fn)(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\app\bps\protected_bp\controller.py", line 9, in forYou
return render_template("ForYou/index.html")
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask\templating.py", line 150, in render_template
return _render(app, template, context)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\flask\templating.py", line 131, in _render
rv = template.render(context)
     ^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\jinja2\environment.py", line 1295, in render
self.environment.handle_exception()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\jinja2\environment.py", line 942, in handle_exception
raise rewrite_traceback_stack(source=source)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\app\templates\ForYou\index.html", line 1, in top-level template code
{% extends "base.jinja.html" %}
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\app\templates\base.jinja.html", line 21, in top-level template code
{% block content required %}
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\app\templates\ForYou\index.html", line 14, in block 'content'
{% for topic in news_data.keys() %}
File "C:\Users\ammar.TRN\Downloads\Group07-main\group07\.venv\Lib\site-packages\jinja2\environment.py", line 490, in getattr
return getattr(obj, attribute)
       ^^^^^^^^^^^^^^^^^^^^^^^
jinja2.exceptions.UndefinedError: 'news_data' is undefined
The debugger caught an exception in your WSGI application. You can now look at the traceback which led to the error.
To switch between the interactive traceback and the plaintext one, you can click on the "Traceback" headline. From the text traceback you can also create a paste of it. For code execution mouse-over the frame you want to debug and click on the console icon on the right side.

You can execute arbitrary Python code in the stack frames and there are some extra helpers available for introspection:

dump() shows all variables in the frame
dump(obj) dumps all that's known about the object
Brought to you by DON'T PANIC, your friendly Werkzeug powered traceback interpreter.
