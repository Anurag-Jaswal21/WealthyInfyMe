from dotenv import load_dotenv
from flask import Flask, render_template, request, session, Blueprint
from config import Config
from datetime import timedelta
import requests
import urllib3
import re

# Disable SSL warning for News API
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Fetch News Function (inline version of app/news_utils.py)
NEWS_API_KEY = '18b2d45a6c5e4d4bb27faf9448d139b9'

def fetch_news_by_query(query, page_size=12):
    url = f'https://newsapi.org/v2/everything?q={query}&language=en&pageSize={page_size}&apiKey={NEWS_API_KEY}'
    try:
        response = requests.get(url, verify=False)
        data = response.json()
        if data.get("status") != "ok":
            print(f"Error fetching {query}: {data}")
            return []
        return data.get("articles", [])
    except Exception as e:
        print(f"Exception while fetching news for {query}:", e)
        return []

# Inline replacement for landing_bp/__init__.py
landing_bp = Blueprint('main', __name__)
@landing_bp.route('/')
def homepage():
    articles = fetch_news_by_query("technology")
    return render_template("landing.html", articles=articles)

# Database and other blueprints
from .db import mongo
from .db import mysql
from .db import bcrypt
from .db import jwt
from .bps.auth_bp import auth_bp
from .bps.api_bp import api_bp
from .bps.protected_bp import protected_bp
from .bps.newsShowCase_bp import newsShowCase_bp
from .bps.world_bp import world_bp
from .bps.newsPage import newsPage_bp

def create_app():
    load_dotenv(dotenv_path='../')
    app = Flask(__name__)
    app.config.from_object(Config)
    app.url_map.strict_slashes = False
    app.permanent_session_lifetime = timedelta(minutes=30)

    # Init DBs
    mongo.init_app(app)
    mysql.init_app(app)
    bcrypt.init_app(app)
    jwt.init_app(app)

    # Register blueprints
    app.register_blueprint(newsPage_bp, url_prefix='/info/')
    app.register_blueprint(api_bp, url_prefix='/api/')
    app.register_blueprint(auth_bp, url_prefix='/auth')
    app.register_blueprint(landing_bp, url_prefix='/')  # <- inlined landing_bp
    app.register_blueprint(protected_bp, url_prefix='/')
    app.register_blueprint(newsShowCase_bp, url_prefix='/newsShowCase')
    app.register_blueprint(world_bp, url_prefix='/world/')

    # Jinja filter
    @app.template_filter('regex_fullmatch')
    def regex_fullmatch(string, pattern):
        return bool(re.fullmatch(pattern, string))

    # 404 handler
    @app.errorhandler(404)
    def notFound(error):
        from datetime import datetime
        return render_template('notFoundPage.html', today=datetime.now())

    # Location session
    @app.before_request
    def set_location():
        if not (session.get('state', False) and session.get('country', False)):
            db = mongo.cx['newChannels']
            countries = list(db.countries.find({'name': 'India'}, {'_id': 0, 'states': 1}))
            session['states'] = (countries if countries else [[]])[0].get('states', [])
            session['state'] = ['Karnataka', 'India']
            session['country'] = 'India'

    return app

# Run app standalone
if __name__ == "__main__":
    app = create_app()
    app.run(debug=True)
